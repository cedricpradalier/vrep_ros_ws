"""autogenerated by genpy from disk_monitor/DiskStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DiskStatus(genpy.Message):
  _md5sum = "27ce5aa2e86dfe73c8794daf13908e8d"
  _type = "disk_monitor/DiskStatus"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string device
string mounted
int32 size_mb
int32 used_mb
int32 available_mb


"""
  __slots__ = ['device','mounted','size_mb','used_mb','available_mb']
  _slot_types = ['string','string','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       device,mounted,size_mb,used_mb,available_mb

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DiskStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.device is None:
        self.device = ''
      if self.mounted is None:
        self.mounted = ''
      if self.size_mb is None:
        self.size_mb = 0
      if self.used_mb is None:
        self.used_mb = 0
      if self.available_mb is None:
        self.available_mb = 0
    else:
      self.device = ''
      self.mounted = ''
      self.size_mb = 0
      self.used_mb = 0
      self.available_mb = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.device
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.mounted
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3i.pack(_x.size_mb, _x.used_mb, _x.available_mb))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.device = str[start:end].decode('utf-8')
      else:
        self.device = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mounted = str[start:end].decode('utf-8')
      else:
        self.mounted = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.size_mb, _x.used_mb, _x.available_mb,) = _struct_3i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.device
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.mounted
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3i.pack(_x.size_mb, _x.used_mb, _x.available_mb))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.device = str[start:end].decode('utf-8')
      else:
        self.device = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mounted = str[start:end].decode('utf-8')
      else:
        self.mounted = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.size_mb, _x.used_mb, _x.available_mb,) = _struct_3i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3i = struct.Struct("<3i")
